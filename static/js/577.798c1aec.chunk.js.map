{"version":3,"file":"static/js/577.798c1aec.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAAgQ,yB,mBCehQ,EARmB,SAACA,GAChB,OACI,iBAAKC,UAAS,UAAKC,EAAL,YAAiBA,GAA/B,WACI,gBAAKC,IAAI,6EACT,SAAC,KAAD,CAASC,GAAE,mBAAcJ,EAAMK,IAA/B,SAAsCL,EAAMM,WCCxD,EANgB,SAACN,GACb,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMO,W,uCC6CpCC,GAAYC,EAAAA,EAAAA,GAAiB,IAe7BC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAd4C,SAACX,GAErE,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAeX,GAC1BF,KAAM,iBACNc,YAAa,wBACpB,0BACI,qDAMhB,EA7CgB,SAACpB,GAEb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAC1C,SAAC,EAAD,CAA4BpB,KAAMoB,EAAOpB,KAAMD,GAAIqB,EAAOrB,IAAzCqB,EAAOrB,OAExBsB,EAAmBN,EAAMO,SAASH,KAAI,SAAAlB,GAAO,OAC7C,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQF,OAK1B,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,iBAAKtB,UAAWC,EAAhB,WACI,yBAAMyB,KACN,SAACjB,EAAD,CAAqBG,SAVX,SAACgB,GACnB7B,EAAM8B,YAAYD,EAAOE,0B,6BCbjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBkB,SAACZ,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACY,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SASpCK,EAAAA,EAFJ,CAGEC,I,gIClBIC,EAA6B,SAACjB,GAAD,MAAuD,CACtFkB,OAAQlB,EAAMmB,KAAKD,SAGhB,SAASH,EAAoBK,GAOhC,OAAOR,EAAAA,EAAAA,IAAQK,EAARL,EANP,SAA2BjC,GACvB,IAAKuC,EAAwBvC,EAAxBuC,OAAWG,GAAhB,OAA6B1C,EAA7B,GACA,OAAKuC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUtC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messege/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4Dm-g\",\"dialogItems\":\"Dialogs_dialogItems__hU778\",\"active\":\"Dialogs_active__TE04p\",\"dialog\":\"Dialogs_dialog__SueId\",\"messages\":\"Dialogs_messages__Iz0d6\",\"buttonAndInput\":\"Dialogs_buttonAndInput__0yHkR\",\"message\":\"Dialogs_message__1gKJR\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: string | number\r\n}\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <img src='https://i.pinimg.com/736x/f5/27/41/f52741fb62bf1d821948a49204406bdc.jpg'/>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Messege/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControl\";\r\nimport {maxLengthCreator, requiredField} from \"utils/validators/validators\";\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: {\r\n        dialogs: Array<DialogType>,\r\n        messages: Array<MessageType>,\r\n        newMessageBody: string\r\n    }\r\n    //isAuth: boolean\r\n}\r\ntype DialogType = {\r\n    name: string,\r\n    id: string | number\r\n}\r\ntype MessageType = {\r\n    message: string,\r\n    id?: number\r\n}\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => (\r\n        <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>))\r\n\r\n    let messagesElements = state.messages.map(message => (\r\n        <Message key={message.id} message={message.message}/>\r\n    ))\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength = maxLengthCreator(30)\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   validate={[requiredField, maxLength]}\r\n                   name={'newMessageBody'}\r\n                   placeholder={'Enter your message'}/>\r\n            <div>\r\n                <button>send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\nexport default Dialogs","import React from 'react';\r\nimport {sendMessageCreator} from \"redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"hoc/WithAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n//let AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n//const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootState} from \"redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: RootState): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    // let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n}\r\n\r\n"],"names":["props","className","s","src","to","id","name","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","state","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}