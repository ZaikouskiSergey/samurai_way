{"version":3,"file":"static/js/549.cf9e9f6c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__+qpIC\",\"picture\":\"ProfileInfo_picture__UIVjZ\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\ntype ProfileStatusPropsType = {\r\n    updateUserStatus: (status: string) => void\r\n    status: string\r\n}\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = ({updateUserStatus, status}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [statusProfile, setStatusProfile] = useState<string>(status)\r\n    //\r\n    useEffect(()=>{\r\n        setStatusProfile(status);\r\n        return ()=>{\r\n            //\r\n        }\r\n    }\r\n    , [])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const inputProfileStatusOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusProfile(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusProfile)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"no status\"}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        value={statusProfile}\r\n                        onChange={inputProfileStatusOnChange}\r\n                        onBlur={deactivateEditMode}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileAPIProps} from \"../../ProfileContainer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileAPIProps\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File)=> void\r\n}\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        //e.currentTarget.files\r\n        if(e.target.files?.length){\r\n            savePhoto(e.target.files[0])\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.picture}>\r\n                <img src='https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg' alt={'ava'}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large ? profile.photos.large : `https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg`}\r\n                    alt={'ava'}\r\n                />\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                <h3>{profile.fullName}</h3>\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n                <p>{profile.aboutMe}</p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__uMDCx\",\"posts\":\"MyPosts_posts__BNn+1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rq7Xl\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://sm.ign.com/ign_nordic/cover/a/avatar-gen/avatar-generations_prsz.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControl\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\ntype PostsType = {\r\n    id?: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => (\r\n        <Post message={p.message} likesCount={p.likesCount}/>\r\n    ))\r\n    const onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\nconst maxLength = maxLengthCreator(10)\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n                <Field name={\"newPostText\"} component={Textarea} placeholder={'Post message'} validate={[requiredField, maxLength]}/>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator} from \"redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"redux/store\";\r\n\r\nlet mapStateToProps = (state:stateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addPost: (newPostText: string)=>{\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileAPIProps} from \"./ProfileContainer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileAPIProps\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File)=> void\r\n}\r\nconst Profile: React.FC<ProfilePropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n                savePhoto={savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, updateUserStatus} from \"redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RootState} from \"redux/redux-store\";\r\nimport {WithAuthRedirect} from \"hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileAPIProps = {\r\n    aboutMe: string | null\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook: string | null\r\n        instagram: string | null\r\n        twitter: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n        mainLink: string | null\r\n    }\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileAPIProps | null\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: null | number\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\ntype PropsProfileType = MapStateToPropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<any, any> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateUserStatus={this.props.updateUserStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\n\r\n//let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n//let withUrlDataContainerComponent = withRouter(ProfileContainer)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootState} from \"redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: RootState): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    // let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n}\r\n\r\n"],"names":["ProfileStatusWithHooks","updateUserStatus","status","useState","editMode","setEditMode","statusProfile","setStatusProfile","useEffect","autoFocus","value","onChange","e","currentTarget","onBlur","onDoubleClick","profile","isOwner","savePhoto","Preloader","className","s","src","alt","photos","large","type","target","files","length","fullName","aboutMe","props","message","likesCount","MyPosts","React","postsElements","posts","map","p","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","isAuth","auth","id","withRouter","WithAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}